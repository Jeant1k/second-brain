#!/bin/bash

# --- НАСТРОЙКИ ---
# Укажите полный путь к директории вашего исходного сервиса
SOURCE_DIR="/home/jean/second_brain/services/sometime-later"
# Укажите полный путь к директории, куда будет скопирован и изменен сервис
DEST_DIR="/home/jean/second_brain/services/waiting"
# -----------------

# Проверка на существование исходной директории
if [ ! -d "$SOURCE_DIR" ]; then
    echo "Ошибка: Исходная директория '$SOURCE_DIR' не найдена!"
    exit 1
fi

# Проверка, не совпадает ли исходная и целевая директория
if [ "$SOURCE_DIR" == "$DEST_DIR" ]; then
    echo "Ошибка: Исходная и целевая директории совпадают. Это опасно!"
    echo "Для изменений на месте, сначала скопируйте вручную, а затем адаптируйте скрипт."
    exit 1
fi

# Шаг 0: Предупреждение и запрос подтверждения (опционально, но рекомендуется)
echo "ВНИМАНИЕ!"
echo "Этот скрипт скопирует '$SOURCE_DIR' в '$DEST_DIR'"
echo "Затем он произведет следующие замены ВНУТРИ '$DEST_DIR':"
echo "  - 'sometime-later' -> 'waiting' (в контенте)"
echo "  - 'sometime_later' -> 'waiting' (в контенте)"
echo "  - 'SometimeLater' -> 'Waiting' (в контенте)"
echo "  - имена файлов/директорий 'sometime_later...' -> 'waiting...'"
echo "  - имена файлов/директорий 'sometime-later...' -> 'waiting...'"
echo ""
echo "УБЕДИТЕСЬ, ЧТО У ВАС ЕСТЬ БЭКАП '$SOURCE_DIR'!"
read -p "Продолжить? (yes/no): " confirmation
if [ "$confirmation" != "yes" ]; then
    echo "Операция отменена."
    exit 0
fi

# --- Шаг 1: Копирование директории сервиса ---
echo ""
echo "Шаг 1: Копирование директории..."
if [ -d "$DEST_DIR" ]; then
    echo "Предупреждение: Целевая директория '$DEST_DIR' уже существует."
    read -p "Удалить существующую '$DEST_DIR' и продолжить? (yes/no): " overwrite_confirm
    if [ "$overwrite_confirm" == "yes" ]; then
        rm -rf "$DEST_DIR"
        echo "Существующая директория '$DEST_DIR' удалена."
    else
        echo "Операция отменена. Целевая директория не была изменена."
        exit 1
    fi
fi

cp -a "$SOURCE_DIR" "$DEST_DIR"
if [ $? -ne 0 ]; then
    echo "Ошибка при копировании директории."
    exit 1
fi
echo "Директория успешно скопирована в '$DEST_DIR'."


# --- Шаг 2: Замена вхождений в файлах ---
echo ""
echo "Шаг 2: Замена вхождений в файлах внутри '$DEST_DIR'..."

# Находим все файлы (кроме тех, что в .git, если есть) и производим замены
# `find` и `perl` обычно более надежны для таких замен, чем `sed` на разных системах
# Особенно для in-place редактирования.
# Если `perl` недоступен, можно адаптировать под `sed`.

# Замены:
# sometime-later на waiting
# sometime_later на waiting
# SometimeLater на Waiting

# Исключаем директорию .git и бинарные файлы, если это возможно и необходимо.
# Для userver проектов основные файлы текстовые (cpp, hpp, yaml, py, sh, cmake, md).
find "$DEST_DIR" -type f -not -path '*/.git/*' -print0 | while IFS= read -r -d $'\0' file; do
    # Проверка, что файл текстовый (простая эвристика, может быть не идеальна)
    if file -b --mime-encoding "$file" | grep -q "us-ascii\|utf-8\|iso-8859"; then
        echo "Обработка файла: $file"
        # Используем perl для надежности и возможности нескольких замен за проход
        perl -i -pe '
            s/sometime-later/waiting/g;
            s/sometime_later/waiting/g;
            s/SometimeLater/Waiting/g;
        ' "$file"
        if [ $? -ne 0 ]; then
            echo "Предупреждение: Возможна ошибка при обработке файла $file с помощью perl."
        fi
    else
        echo "Пропуск (предположительно бинарный): $file"
    fi
done
echo "Замена вхождений в файлах завершена."


# --- Шаг 3: Переименование файлов и директорий ---
echo ""
echo "Шаг 3: Переименование файлов и директорий в '$DEST_DIR'..."
echo "Переименование будет производиться от самых глубоко вложенных к родительским."

# Важно: сначала переименовываем файлы/директории с `sometime_later`, затем с `sometime-later`
# или наоборот, в зависимости от того, какой из них может быть частью другого после первой замены.
# В данном случае порядок, скорее всего, не критичен, но лучше быть последовательным.
# Используем -depth, чтобы сначала обработать содержимое директорий, а потом сами директории.

rename_patterns=("sometime_later" "sometime-later")
target_name="waiting"

for pattern in "${rename_patterns[@]}"; do
    echo "Ищем и переименовываем элементы, содержащие '$pattern'..."
    # Находим все файлы и директории, имя которых содержит паттерн
    # -print0 и while read -d $'\0' для безопасной обработки имен с пробелами/спецсимволами
    find "$DEST_DIR" -depth -name "*${pattern}*" -print0 | while IFS= read -r -d $'\0' old_path; do
        # Проверяем, существует ли еще этот путь (мог быть переименован как часть родителя)
        if [ ! -e "$old_path" ]; then
            continue
        fi

        old_basename=$(basename "$old_path")
        dir_path=$(dirname "$old_path")

        # Заменяем только первое вхождение паттерна в имени (чтобы избежать двойных замен, если имя "sometime_later-sometime-later")
        # Можно использовать `sed` для более сложных замен, если требуется
        new_basename=$(echo "$old_basename" | sed "s/${pattern}/${target_name}/") # Заменяет первое вхождение

        # Полный новый путь
        new_path="$dir_path/$new_basename"

        # Переименовываем, только если имя действительно изменилось и новый путь не совпадает со старым
        if [ "$old_path" != "$new_path" ]; then
            # Проверка на случай, если файл/директория с таким именем уже существует (маловероятно, но безопасно)
            if [ -e "$new_path" ]; then
                echo "Предупреждение: Целевой путь '$new_path' уже существует. Пропуск переименования '$old_path'."
            else
                echo "Переименование: '$old_path' -> '$new_path'"
                mv -T "$old_path" "$new_path" # -T трактует DEST как обычный файл/дир, а не директорию для переноса
                if [ $? -ne 0 ]; then
                    echo "Ошибка при переименовании '$old_path' в '$new_path'."
                fi
            fi
        fi
    done
done
echo "Переименование файлов и директорий завершено."

echo ""
echo "--- Все операции завершены! ---"
echo "Новый сервис находится в: $DEST_DIR"
echo ""
echo "Не забудьте:"
echo "1. Проверить изменения в '$DEST_DIR' (особенно CMakeLists.txt, конфигурационные файлы .yaml, исходный код)."
echo "2. Пересобрать проект userver в новой директории."
echo "3. Протестировать работоспособность нового сервиса."
echo "4. Если вы используете систему контроля версий (Git), удалите старую директорию .git (если она скопировалась и не нужна) в '$DEST_DIR' и инициализируйте новый репозиторий или скопируйте .git из '$SOURCE_DIR' и адаптируйте историю, если это ваш план."


