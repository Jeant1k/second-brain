version: "3.8"

services:
  # --- База данных для current-actions ---
  postgres-current-actions:
    image: postgres:16
    container_name: current_actions_postgres_db
    environment:
      POSTGRES_USER: current_actions_user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: current_actions
    ports:
      - "5432:5432" # Связываем порт 5432 контейнера с портом 5432 хоста
    volumes:
      - ./services/current-actions/postgresql/schemas/current_actions.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - app_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U current_actions_user -d current_actions"]
      interval: 10s
      timeout: 5s
      retries: 5

  # --- Сервис current-actions ---
  current-actions:
    build:
      context: ./services/current-actions # Путь к директории сервиса
      dockerfile: Dockerfile
    container_name: current_actions_service
    depends_on:
      postgres-current-actions:
        condition: service_healthy 
    # Переменные окружения для current-actions (если они переопределяют config_vars.yaml)
    # environment:
    #   DB_CONNECTION: 'postgresql://current_actions_user:password@postgres_current_actions:5432/current_actions'
    ports:
      - "8080:8080" # Связываем порт 8080 контейнера с портом 8080 хоста
    networks:
      - app_network

  # --- База данных для sometime-later ---
  postgres-sometime-later:
    image: postgres:16
    container_name: sometime_later_postgres_db
    environment:
      POSTGRES_USER: sometime_later_user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: sometime_later
    ports:
      - "5433:5432" # Связываем порт 5432 контейнера с портом 5433 хоста (чтобы не было конфликта с 5432 от current-actions)
    volumes:
      - ./services/sometime-later/postgresql/schemas/sometime_later.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - app_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U sometime_later_user -d sometime_later"]
      interval: 10s
      timeout: 5s
      retries: 5

  # --- Сервис sometime-later ---
  sometime-later:
    build:
      context: ./services/sometime-later # Путь к директории сервиса
      dockerfile: Dockerfile
    container_name: sometime_later_service
    depends_on:
      postgres-sometime-later:
        condition: service_healthy
    # Переменные окружения для sometime-later (если они переопределяют config_vars.yaml)
    # environment:
    #   DB_CONNECTION: 'postgresql://sometime_later_user:password@postgres_sometime_later:5432/sometime_later_db'
    ports:
      - "8081:8080" # Связываем порт 8080 контейнера с портом 8081 хоста (чтобы не было конфликта с 8080 от current-actions)
    networks:
      - app_network

  # --- База данных для waiting ---
  postgres-waiting:
    image: postgres:16
    container_name: waiting_postgres_db
    environment:
      POSTGRES_USER: waiting_user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: waiting
    ports:
      - "5434:5432" # Связываем порт 5434 контейнера с портом 5432 хоста
    volumes:
      - ./services/waiting/postgresql/schemas/waiting.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - app_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U waiting_user -d waiting"]
      interval: 10s
      timeout: 5s
      retries: 5

  # --- Сервис waiting ---
  waiting:
    build:
      context: ./services/waiting # Путь к директории сервиса
      dockerfile: Dockerfile
    container_name: waiting_service
    depends_on:
      postgres-waiting:
        condition: service_healthy 
    # Переменные окружения для waiting (если они переопределяют config_vars.yaml)
    # environment:
    #   DB_CONNECTION: 'postgresql://waiting_user:password@postgres_waiting:5432/waiting'
    ports:
      - "8082:8080" # Связываем порт 8082 контейнера с портом 8080 хоста
    networks:
      - app_network

  # --- База данных для notes ---
  postgres-notes:
    image: postgres:16
    container_name: notes_postgres_db
    environment:
      POSTGRES_USER: notes_user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: notes
    ports:
      - "5435:5432" # Связываем порт 5435 контейнера с портом 5432 хоста
    volumes:
      - ./services/notes/postgresql/schemas/notes.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - app_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U notes_user -d notes"]
      interval: 10s
      timeout: 5s
      retries: 5

  # --- Сервис notes ---
  notes:
    build:
      context: ./services/notes # Путь к директории сервиса
      dockerfile: Dockerfile
    container_name: notes_service
    depends_on:
      postgres-notes:
        condition: service_healthy 
    # Переменные окружения для notes (если они переопределяют config_vars.yaml)
    # environment:
    #   DB_CONNECTION: 'postgresql://notes_user:password@postgres_notes:5432/notes'
    ports:
      - "8083:8080" # Связываем порт 8083 контейнера с портом 8080 хоста
    networks:
      - app_network

  ai-proxy:
    build:
      context: ./services/ai-proxy
      dockerfile: Dockerfile
    container_name: ai_proxy_service
    ports:
      - "8001:8000" # Связываем порт 8001 хоста с портом 8000 контейнера
    networks:
      - app_network
    env_file:
      - ./services/ai-proxy/.env 
    volumes:
      # Для разработки с hot-reload: монтируем код внутрь контейнера.
      # Если DEBUG: "true", uvicorn (запущенный через main.py) будет перезагружаться при изменениях.
      - ./services/ai-proxy/ai_proxy:/app/ai_proxy

  # --- Сервис telegram-bot ---
  telegram-bot:
    build:
      context: ./services/telegram-bot # Укажите путь к папке вашего telegram-bot сервиса
      dockerfile: Dockerfile
    container_name: telegram_bot_service
    depends_on:
      current-actions:
        condition: service_started
      sometime-later:
        condition: service_started
      waiting:
        condition: service_started
      notes:
        condition: service_started
      ai-proxy:
        condition: service_started
    networks:
      - app_network
    env_file:
      - ./services/telegram-bot/.env # Убедитесь, что URL в этом файле настроены на имена сервисов
    # Для разработки с обновлением кода без пересборки образа (если ваш бот это поддерживает):
    # volumes:
    #   - ./services/telegram-bot/telegram_bot:/app/telegram_bot
    #   - ./services/telegram-bot/requirements.txt:/app/requirements.txt # Для обновления зависимостей
    restart: unless-stopped # Перезапускать бота, если он упадет

# Определяем сеть, чтобы сервисы могли общаться по именам
networks:
  app_network:
    driver: bridge
