from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from typing import List, Dict, Optional
from telegram_bot.utils.callback_data import TaskAction, Pagination, FreeTextAction

MAX_TASK_NAME_LENGTH = 30 # –î–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∞—Ö

def get_tasks_list_keyboard(items: List[Dict], item_type: str, current_cursor: Optional[str] = None, next_cursor: Optional[str] = None, prev_cursor: Optional[str] = None) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    for item in items:
        name = item.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
        display_name = (name[:MAX_TASK_NAME_LENGTH] + '...') if len(name) > MAX_TASK_NAME_LENGTH else name
        builder.row(
            InlineKeyboardButton(
                text=display_name,
                callback_data=TaskAction(action="view", item_id=item['id'], item_type=item_type, cursor=current_cursor).pack()
            )
        )

    pagination_buttons = []
    if prev_cursor:
        pagination_buttons.append(
            InlineKeyboardButton(text="‚¨ÖÔ∏è –í–ª–µ–≤–æ", callback_data=Pagination(action="prev", item_type=item_type, cursor=prev_cursor).pack())
        )
    if next_cursor:
        pagination_buttons.append(
            InlineKeyboardButton(text="–í–ø—Ä–∞–≤–æ ‚û°Ô∏è", callback_data=Pagination(action="next", item_type=item_type, cursor=next_cursor).pack())
        )
    if pagination_buttons:
        builder.row(*pagination_buttons)
    
    return builder.as_markup()

def get_task_view_keyboard(item_id: str, item_name: str, item_type: str, current_list_cursor: Optional[str] = None) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    display_name = (item_name[:MAX_TASK_NAME_LENGTH] + '...') if len(item_name) > MAX_TASK_NAME_LENGTH else item_name
    
    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è
    builder.row(InlineKeyboardButton(
        text=f"üìù {display_name}",
        callback_data=TaskAction(action="edit", item_id=item_id, item_type=item_type, cursor=current_list_cursor).pack()
    ))

    action_buttons = [
        InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=TaskAction(action="back", item_id="0", item_type=item_type, cursor=current_list_cursor).pack())
    ]

    if item_type == "current_actions":
        action_buttons.extend([
            InlineKeyboardButton(text="‚úÖ –í—ã–ø–æ–ª–Ω–∏—Ç—å", callback_data=TaskAction(action="complete", item_id=item_id, item_type=item_type, cursor=current_list_cursor).pack()),
            InlineKeyboardButton(text="‚è≥ –û—Ç–ª–æ–∂–∏—Ç—å", callback_data=TaskAction(action="move_to_sometime", item_id=item_id, item_type=item_type, cursor=current_list_cursor).pack()),
            InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=TaskAction(action="delete_prompt", item_id=item_id, item_type=item_type, cursor=current_list_cursor).pack())
        ])
    elif item_type == "sometime_later":
        action_buttons.extend([
            InlineKeyboardButton(text="‚úÖ –í—ã–ø–æ–ª–Ω–∏—Ç—å", callback_data=TaskAction(action="complete", item_id=item_id, item_type=item_type, cursor=current_list_cursor).pack()),
            InlineKeyboardButton(text="‚ö°Ô∏è –í —Ä–∞–±–æ—Ç—É", callback_data=TaskAction(action="move_to_current", item_id=item_id, item_type=item_type, cursor=current_list_cursor).pack()),
            InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=TaskAction(action="delete_prompt", item_id=item_id, item_type=item_type, cursor=current_list_cursor).pack())
        ])
    elif item_type == "waiting":
        action_buttons.extend([
            InlineKeyboardButton(text="‚úÖ –í—ã–ø–æ–ª–Ω–∏—Ç—å", callback_data=TaskAction(action="complete", item_id=item_id, item_type=item_type, cursor=current_list_cursor).pack()),
            InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=TaskAction(action="delete_prompt", item_id=item_id, item_type=item_type, cursor=current_list_cursor).pack())
        ])
    elif item_type == "notes":
         action_buttons.extend([
            InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=TaskAction(action="delete_prompt", item_id=item_id, item_type=item_type, cursor=current_list_cursor).pack())
        ])
    elif item_type == "completed": # –î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
        action_buttons.extend([
            InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –Ω–∞–≤—Å–µ–≥–¥–∞", callback_data=TaskAction(action="delete_prompt", item_id=item_id, item_type=item_type, cursor=current_list_cursor).pack())
        ])


    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ 2-3 –≤ —Ä—è–¥ –¥–ª—è –ª—É—á—à–µ–≥–æ –≤–∏–¥–∞
    if len(action_buttons) <= 3:
        builder.row(*action_buttons)
    else: # 4 –∫–Ω–æ–ø–∫–∏, 1+3
        builder.row(action_buttons[0])
        builder.row(*action_buttons[1:])


    return builder.as_markup()


def get_confirm_delete_keyboard(item_id: str, item_type: str, current_list_cursor: Optional[str] = None, original_message_id: int | None = None) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    if item_type == "trash_suggestion": # –û—Å–æ–±—ã–π —Å–ª—É—á–∞–π –¥–ª—è —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –≤–≤–æ–¥–∞
         builder.row(
            InlineKeyboardButton(text="üóëÔ∏è –î–∞, —ç—Ç–æ –º—É—Å–æ—Ä", callback_data=FreeTextAction(action="confirm_delete", original_message_id=original_message_id).pack()),
            InlineKeyboardButton(text="‚úçÔ∏è –ù–µ—Ç, –≤–≤–µ—Å—Ç–∏ —Å–Ω–æ–≤–∞", callback_data=FreeTextAction(action="retry_input", original_message_id=original_message_id).pack())
        )
    else:
        builder.row(
            InlineKeyboardButton(
                text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å",
                callback_data=TaskAction(action="delete_confirm", item_id=item_id, item_type=item_type, cursor=current_list_cursor).pack()
            ),
            InlineKeyboardButton(
                text="‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞",
                callback_data=TaskAction(action="view", item_id=item_id, item_type=item_type, cursor=current_list_cursor).pack() # –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É –∑–∞–¥–∞—á–∏
            )
        )
    return builder.as_markup()
