import asyncio
import logging
import os

from aiogram import Bot, Dispatcher, F
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import BotCommand, BotCommandScopeDefault
from dotenv import load_dotenv

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä—ã
from telegram_bot.handlers import common_handlers, free_text_handler, task_list_handlers, task_action_handlers
from telegram_bot.clients.api_client import api_client # –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
if not TELEGRAM_BOT_TOKEN:
    exit("Error: no TELEGRAM_BOT_TOKEN provided")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(name)s - %(message)s",
)
logger = logging.getLogger(__name__)


async def set_commands(bot: Bot):
    commands = [
        BotCommand(command="start", description="üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å/–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
        BotCommand(command="help", description="‚ÑπÔ∏è –ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º"),
        BotCommand(command="support", description="üõ†Ô∏è –ü–æ–¥–¥–µ—Ä–∂–∫–∞"),
        BotCommand(command="cancel", description="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ")
    ]
    await bot.set_my_commands(commands, BotCommandScopeDefault())


async def main():
    bot = Bot(token=TELEGRAM_BOT_TOKEN)
    storage = MemoryStorage() # –ò—Å–ø–æ–ª—å–∑—É–µ–º MemoryStorage –¥–ª—è FSM
    dp = Dispatcher(storage=storage)

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ä–æ—É—Ç–µ—Ä–æ–≤
    dp.include_router(common_handlers.router)
    dp.include_router(task_list_handlers.router) # –î–æ–ª–∂–µ–Ω –∏–¥—Ç–∏ –¥–æ free_text, –µ—Å–ª–∏ –∫–Ω–æ–ø–∫–∏ —Å–æ–≤–ø–∞–¥–∞—é—Ç —Å —Ç–µ–∫—Å—Ç–æ–º
    dp.include_router(task_action_handlers.router) # Callback-—Ö–µ–Ω–¥–ª–µ—Ä—ã
    dp.include_router(free_text_handler.router)   # –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–º –∏–∑ Message —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤

    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –º–µ–Ω—é
    await set_commands(bot)
    
    logger.info("Bot is starting...")
    # –ó–∞–ø—É—Å–∫ polling
    try:
        await dp.start_polling(bot, allowed_updates=dp.resolve_used_update_types())
    finally:
        await bot.session.close()
        logger.info("Bot has been stopped.")


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logger.info("Bot stopped by user.")
