from typing import Optional
from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from telegram_bot.clients.api_client import api_client
from telegram_bot.keyboards.inline_keyboards import get_tasks_list_keyboard, get_task_view_keyboard, get_confirm_delete_keyboard
from telegram_bot.utils.callback_data import TaskAction, Pagination
from telegram_bot.internal.states import CommonStates
import logging
import asyncio # –î–ª—è "–í—ã–ø–æ–ª–Ω–µ–Ω–æ"

logger = logging.getLogger(__name__)
router = Router()

ITEM_TYPE_MAP = {
    "–ó–∞–¥–∞—á–∏": "current_actions",
    "–ù–µ —Å–µ–π—á–∞—Å": "sometime_later",
    "–û–∂–∏–¥–∞–Ω–∏—è": "waiting",
    "–ó–∞–º–µ—Ç–∫–∏": "notes",
    "–í—ã–ø–æ–ª–Ω–µ–Ω–æ": "completed" # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ç–∏–ø –¥–ª—è –∞–≥—Ä–µ–≥–∞—Ü–∏–∏
}
ITEM_NAME_MAP = {
    "current_actions": "–∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á",
    "sometime_later": "–æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á",
    "waiting": "–æ–∂–∏–¥–∞–Ω–∏–π",
    "notes": "–∑–∞–º–µ—Ç–æ–∫",
    "completed": "–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á"
}

SERVICE_LIST_METHODS = {
    "current_actions": api_client.list_current_actions,
    "sometime_later": api_client.list_sometime_later_tasks,
    "waiting": api_client.list_waiting_tasks,
    "notes": api_client.list_notes,
}
SERVICE_ENTITY_NAMES = { # –î–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π
    "current_actions": ("–ó–∞–¥–∞—á–∏", "–∑–∞–¥–∞—á"),
    "sometime_later": ("–û—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ", "–æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á"),
    "waiting": ("–û–∂–∏–¥–∞–Ω–∏—è", "–æ–∂–∏–¥–∞–Ω–∏–π"),
    "notes": ("–ó–∞–º–µ—Ç–∫–∏", "–∑–∞–º–µ—Ç–æ–∫"),
    "completed": ("–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ", "–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á")

}

async def show_item_list(message_or_query: Message | CallbackQuery, item_type: str, user_id: int, cursor: Optional[str] = None, bot: Optional[Bot] = None):
    """–û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤."""
    is_callback = isinstance(message_or_query, CallbackQuery)
    target_message = message_or_query.message if is_callback else message_or_query
    
    if not target_message: # –ù–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ query.message –±—É–¥–µ—Ç None
        logger.error(f"Target message is None for item_type {item_type}")
        if is_callback: await message_or_query.answer("–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞.")
        return

    title, empty_list_msg_part = SERVICE_ENTITY_NAMES.get(item_type, ("–≠–ª–µ–º–µ–Ω—Ç—ã", "—ç–ª–µ–º–µ–Ω—Ç–æ–≤"))

    if item_type == "completed":
        await show_completed_items_list(message_or_query, user_id, cursor, bot)
        return

    list_method = SERVICE_LIST_METHODS.get(item_type)
    if not list_method:
        await target_message.answer(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–ø–∏—Å–∫–∞: {item_type}")
        return
        
    status_filter = "active"
    if item_type == "sometime_later": status_filter = "pending"
    elif item_type == "notes": status_filter = "active" # notes API –æ–∂–∏–¥–∞–µ—Ç 'active' or 'deleted'

    items_data, status_code = await list_method(user_id=user_id, status=status_filter, cursor=cursor)

    if status_code == 200 and items_data:
        items = items_data.get( "tasks" if item_type != "notes" else "notes", [])
        next_cursor = items_data.get("cursor")
        
        # –î–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –≤ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –Ω–∞–º –Ω—É–∂–µ–Ω –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∫—É—Ä—Å–æ—Ä.
        # API –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ, —Ç–∞–∫ —á—Ç–æ –º—ã –∑–∞–ø–æ–º–∏–Ω–∞–µ–º —Ç–µ–∫—É—â–∏–π –∫–∞–∫ "–ø—Ä–µ–¥—ã–¥—É—â–∏–π" –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞.
        # –≠—Ç–æ —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞, –Ω–µ –∏–¥–µ–∞–ª—å–Ω–∞ –¥–ª—è –≥–ª—É–±–æ–∫–æ–π –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –Ω–∞–∑–∞–¥.
        # –ß—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—É—é "–Ω–∞–∑–∞–¥", –Ω—É–∂–Ω–æ —Ö—Ä–∞–Ω–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∫—É—Ä—Å–æ—Ä–æ–≤ –∏–ª–∏ API –¥–æ–ª–∂–µ–Ω –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å prev_cursor/offset.
        # –î–ª—è –¥–∞–Ω–Ω–æ–π –í–ö–†, –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ "–≤–ª–µ–≤–æ" –±—É–¥–µ—Ç –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –Ω–∞ –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É (cursor=None).
        prev_page_cursor = None # –≠—Ç–æ—Ç –∫—É—Ä—Å–æ—Ä –≤–µ—Ä–Ω–µ—Ç –Ω–∞ –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        if cursor: # –ï—Å–ª–∏ –º—ã –Ω–µ –Ω–∞ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ, —Ç–æ –∫–Ω–æ–ø–∫–∞ "–≤–ª–µ–≤–æ" –±—É–¥–µ—Ç –±–µ–∑ –∫—É—Ä—Å–æ—Ä–∞
             pass # –û—Å—Ç–∞–≤–ª—è–µ–º prev_page_cursor = None –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞ –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É

        if items:
            keyboard = get_tasks_list_keyboard(items, item_type, current_cursor=cursor, next_cursor=next_cursor, prev_cursor=prev_page_cursor)
            text = f"üìã –í–∞—à —Å–ø–∏—Å–æ–∫ '{title}':"
            if is_callback:
                await target_message.edit_text(text, reply_markup=keyboard)
            else:
                await target_message.answer(text, reply_markup=keyboard)
        else:
            text = f"üì≠ –í–∞—à —Å–ø–∏—Å–æ–∫ '{title}' –ø—É—Å—Ç."
            if is_callback:
                 # –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ —Å—Ç–∞–ª –ø—É—Å—Ç –ø–æ—Å–ª–µ –¥–µ–π—Å—Ç–≤–∏—è, –ª—É—á—à–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await target_message.answer(text)
                await target_message.delete() # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º
            else:
                await target_message.answer(text)
    else:
        error_msg = items_data.get("error", "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫") if items_data else "–°–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
        await target_message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {error_msg} (–∫–æ–¥: {status_code})")
    
    if is_callback:
        await message_or_query.answer()


@router.message(F.text.in_(ITEM_TYPE_MAP.keys()))
async def handle_menu_button_press(message: Message, state: FSMContext, bot: Bot):
    await state.clear() # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    item_type_key = message.text
    item_type_val = ITEM_TYPE_MAP.get(item_type_key)
    if item_type_val:
        await show_item_list(message, item_type_val, message.from_user.id, bot=bot)
    else:
        await message.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –º–µ–Ω—é.")


@router.callback_query(Pagination.filter())
async def handle_pagination(query: CallbackQuery, callback_data: Pagination, bot: Bot):
    user_id = query.from_user.id
    await show_item_list(query, callback_data.item_type, user_id, callback_data.cursor, bot=bot)
    # await query.answer() # Answer –¥–µ–ª–∞–µ—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ show_item_list


async def show_completed_items_list(message_or_query: Message | CallbackQuery, user_id: int, cursor: Optional[str] = None, bot: Optional[Bot] = None):
    is_callback = isinstance(message_or_query, CallbackQuery)
    target_message = message_or_query.message if is_callback else message_or_query

    if not target_message:
        if is_callback: await message_or_query.answer("–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞.")
        return

    await target_message.answer("‚è≥ –ó–∞–≥—Ä—É–∂–∞—é –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏...")

    all_completed_tasks = []
    # –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —á—Ç–æ –ø–∞–≥–∏–Ω–∞—Ü–∏—è –¥–ª—è "–í—ã–ø–æ–ª–Ω–µ–Ω–æ" –±—É–¥–µ—Ç —Å–ª–æ–∂–Ω–æ–π, –µ—Å–ª–∏ –∫–∞–∂–¥—ã–π —Å–µ—Ä–≤–∏—Å –∏–º–µ–µ—Ç —Å–≤–æ–π –∫—É—Ä—Å–æ—Ä.
    # –î–ª—è MVP, "–í—ã–ø–æ–ª–Ω–µ–Ω–æ" –º–æ–∂–µ—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞–¥–∞—á –±–µ–∑ —Å–ª–æ–∂–Ω–æ–π –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    # –∏–ª–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏—é —Ç–æ–ª—å–∫–æ –ø–æ –æ–¥–Ω–æ–º—É –∏–∑ —Å–µ—Ä–≤–∏—Å–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, current_actions).
    # –í —Ç–µ–∫—É—â–µ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ API –ø–∞–≥–∏–Ω–∞—Ü–∏—è –ø–æ "–í—ã–ø–æ–ª–Ω–µ–Ω–æ" –Ω–µ –æ—á–µ–Ω—å –æ—á–µ–≤–∏–¥–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç, –µ—Å–ª–∏ —Å–º–µ—à–∏–≤–∞—Ç—å.
    # –ó–¥–µ—Å—å —è —Å–¥–µ–ª–∞—é —Å–±–æ—Ä –±–µ–∑ –æ–±—â–µ–π –ø–∞–≥–∏–Ω–∞—Ü–∏–∏, –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–≤—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∫–∞–∂–¥–æ–≥–æ.
    # TODO: –£—Ç–æ—á–Ω–∏—Ç—å, –∫–∞–∫ –¥–æ–ª–∂–Ω–∞ —Ä–∞–±–æ—Ç–∞—Ç—å –ø–∞–≥–∏–Ω–∞—Ü–∏—è –¥–ª—è "–í—ã–ø–æ–ª–Ω–µ–Ω–æ" –Ω–∞ —É—Ä–æ–≤–Ω–µ API.
    # –ü–æ–∫–∞ —á—Ç–æ –∫—É—Ä—Å–æ—Ä –±—É–¥–µ—Ç –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –¥–ª—è "–í—ã–ø–æ–ª–Ω–µ–Ω–æ".

    services_to_query = {
        "current_actions": api_client.list_current_actions,
        "sometime_later": api_client.list_sometime_later_tasks,
        "waiting": api_client.list_waiting_tasks,
    }
    
    # –î–ª—è –í–ö–†–ë: –º–æ–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑–∞—Ç—å N –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∏–∑ –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.
    # –ò–ª–∏ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–∞–≥–∏–Ω–∞—Ü–∏—é –ø–æ –æ–¥–Ω–æ–π –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π, –∞ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ–¥–≥—Ä—É–∂–∞—Ç—å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ.
    # –ü–æ–∫–∞ —á—Ç–æ —Å–¥–µ–ª–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π —Å–±–æ—Ä –±–µ–∑ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ callback.
    # –ò–ª–∏, –µ—Å–ª–∏ –≤–∞—à API –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π –∫—É—Ä—Å–æ—Ä –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö - –æ—Ç–ª–∏—á–Ω–æ.
    # –ú–æ–π –ø—Ä–∏–º–µ—Ä API –Ω–µ –∏–º–µ–µ—Ç —Ç–∞–∫–æ–≥–æ, –ø–æ—ç—Ç–æ–º—É —Å–±–æ—Ä –±—É–¥–µ—Ç —Å—É–º–º–∞—Ä–Ω—ã–π.

    tasks_futures = [
        s_method(user_id=user_id, status="completed") #, cursor=cursor) # cursor –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –ø–æ–∫–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º
        for s_method in services_to_query.values()
    ]
    results = await asyncio.gather(*tasks_futures, return_exceptions=True)

    has_errors = False
    for res_data, status_code in results:
        if isinstance(res_data, Exception):
            logger.error(f"Error fetching completed tasks: {res_data}")
            has_errors = True
            continue
        if status_code == 200 and res_data:
            tasks = res_data.get("tasks", [])
            for task in tasks:
                 # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫, —á—Ç–æ–±—ã –∑–Ω–∞—Ç—å, –∫—É–¥–∞ —Å–ª–∞—Ç—å –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ/–∏–∑–º–µ–Ω–µ–Ω–∏–µ.
                 # –≠—Ç–æ –¥–æ–ª–∂–Ω–æ –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –æ—Ç API, –Ω–æ –µ—Å–ª–∏ –Ω–µ—Ç, –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ —ç–Ω–¥–ø–æ–∏–Ω—Ç—É.
                 # –í –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ, —Ç–∞–∫ –∫–∞–∫ –º—ã –∞–≥—Ä–µ–≥–∏—Ä—É–µ–º, –Ω—É–∂–Ω–æ –∫–∞–∫-—Ç–æ —ç—Ç–æ —Ö—Ä–∞–Ω–∏—Ç—å/–æ–ø—Ä–µ–¥–µ–ª—è—Ç—å
                 # –ü—Ä–æ—â–µ –≤—Å–µ–≥–æ –µ—Å–ª–∏ API –æ—Ç–¥–∞—Å—Ç source_service_type –≤ —Å–∞–º–æ–π –∑–∞–¥–∞—á–µ.
                 # –î–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è, –µ—Å–ª–∏ —ç—Ç–æ–≥–æ –Ω–µ—Ç, –º—ã –±—É–¥–µ–º –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –∏–º—è.
                 # –î–µ–π—Å—Ç–≤–∏—è —Å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–º–∏ —Å–ª–æ–∂–Ω—ã –±–µ–∑ —è–≤–Ω–æ–≥–æ source_service.
                 # –í –¢–ó —Å–∫–∞–∑–∞–Ω–æ "–¥–µ–ª–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –≤ —Å–µ—Ä–≤–∏—Å, –∏–∑ –∫–æ—Ç–æ—Ä–æ–≥–æ –ø—Ä–∏—à–ª–∞ –∑–∞–¥–∞—á–∞"
                 # –≠—Ç–æ –∑–Ω–∞—á–∏—Ç, —á—Ç–æ Task –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏—Å—Ç–æ—á–Ω–∏–∫–µ.
                 # –ï—Å–ª–∏ `task` –æ–±—ä–µ–∫—Ç –∏–∑ `ListTasksResponse` –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç `source_type`,
                 # —Ç–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–º–∏ –±—É–¥–µ—Ç –∑–∞—Ç—Ä—É–¥–Ω–µ–Ω–æ.
                 # –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —á—Ç–æ –¥–ª—è "–í—ã–ø–æ–ª–Ω–µ–Ω–æ" –º—ã –º–æ–∂–µ–º –∏–º–µ—Ç—å —Ç–∞–∫–æ–π source_type.
                 # –ï—Å–ª–∏ –Ω–µ—Ç, —Ç–æ —Ç–æ–ª—å–∫–æ "–£–¥–∞–ª–∏—Ç—å" (–ª–æ–≥–∏—á–µ—Å–∫–æ–µ, —Ç.–µ. completed -> deleted).
                all_completed_tasks.append(task) # –ù—É–∂–µ–Ω source_type –≤ task!
        elif status_code != 200:
            logger.warning(f"Partial error fetching completed tasks: {status_code} from a service.")
            has_errors = True
            
    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ `completed_at` –µ—Å–ª–∏ —ç—Ç–æ –ø–æ–ª–µ –µ—Å—Ç—å –∏ –æ–Ω–æ –Ω–∞–¥–µ–∂–Ω–æ
    # all_completed_tasks.sort(key=lambda t: t.get('completed_at', t.get('updated_at')), reverse=True)

    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á (–æ—á–µ–Ω—å —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è):
    # –ú–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –ø–∞–≥–∏–Ω–∞—Ü–∏—é "–≤–∏—Ä—Ç—É–∞–ª—å–Ω—É—é" –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ –±–æ—Ç–∞, –Ω–æ —ç—Ç–æ –Ω–µ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ –ø—Ä–∏ –±–æ–ª—å—à–∏—Ö –æ–±—ä–µ–º–∞—Ö.
    # –ó–¥–µ—Å—å, –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã, –µ—Å–ª–∏ –æ–±—â–∏–π —Å–ø–∏—Å–æ–∫ –±–æ–ª—å—à–æ–π, –º–æ–∂–Ω–æ –æ–±—Ä–µ–∑–∞—Ç—å.
    # –õ–∏–±–æ, –∫–∞–∫ –∏ –≤—ã—à–µ, –ø–∞–≥–∏–Ω–∞—Ü–∏—è –ø–æ —Ñ–∞–∫—Ç—É –¥–µ–ª–∞–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ.
    # –°–µ–π—á–∞—Å –º—ã –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫—É—Ä—Å–æ—Ä –¥–ª—è "–í—ã–ø–æ–ª–Ω–µ–Ω–æ–≥–æ" –∏ –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å—ë.

    if all_completed_tasks:
        # –î–ª—è `get_tasks_list_keyboard` –Ω—É–∂–µ–Ω item_type, —á—Ç–æ–±—ã callback_data –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–ª–∏—Å—å.
        # –¢–∞–∫ –∫–∞–∫ —ç—Ç–æ –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫, –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º "completed".
        # –ù–æ —ç—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ `TaskAction` –¥–æ–ª–∂–µ–Ω –±—É–¥–µ—Ç –∑–Ω–∞—Ç—å, –≤ –∫–∞–∫–æ–π —Ä–µ–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–∏—Å –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è.
        # –≠—Ç–æ —Ä–µ—à–∞–µ—Ç—Å—è –ª–∏–±–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º `source_service` –≤ `task_id` (–ø–ª–æ—Ö–æ), –ª–∏–±–æ –≤ `item` –∫–∞–∫ –ø–æ–ª–µ.
        # –ï—Å–ª–∏ `task['id']` –≥–ª–æ–±–∞–ª—å–Ω–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã, —Ç–æ –º–æ–∂–Ω–æ —Ö—Ä–∞–Ω–∏—Ç—å –º–∞–ø–ø–∏–Ω–≥ `task_id -> source_service`.
        # –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏, –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ `TaskAction` –¥–ª—è `item_type="completed"` –±—É–¥–µ—Ç —Å–ª–æ–∂–Ω–µ–µ.
        keyboard = get_tasks_list_keyboard(all_completed_tasks, "completed", current_cursor=None, next_cursor=None, prev_cursor=None) # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ø–∞–≥–∏–Ω–∞—Ü–∏—è
        text = "‚úÖ –í–∞—à —Å–ø–∏—Å–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á:"
        if is_callback and target_message:
            await target_message.edit_text(text, reply_markup=keyboard)
        elif target_message:
            await target_message.answer(text, reply_markup=keyboard)
    else:
        text = "üéâ –í—Å–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –∏–ª–∏ –∏—Ö –µ—â–µ –Ω–µ—Ç."
        if has_errors:
            text += "\n(–í–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —á–∞—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö)"
        if is_callback and target_message:
            await target_message.edit_text(text)
            # await target_message.answer(text) # –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ —Å—Ç–∞—Ä–æ–µ –±—ã–ª–æ —Å–æ —Å–ø–∏—Å–∫–æ–º
            # await target_message.delete()
        elif target_message:
            await target_message.answer(text)
    
    if is_callback:
        await message_or_query.answer()

