from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from telegram_bot.clients.api_client import api_client
from telegram_bot.internal.states import CommonStates
from telegram_bot.keyboards.inline_keyboards import get_confirm_delete_keyboard
from telegram_bot.utils.callback_data import FreeTextAction
import logging

logger = logging.getLogger(__name__)
router = Router()

async def add_item_based_on_type(user_id: int, item_name: str, item_type: str, message: Message):
    response_data, status_code = None, None
    type_rus = ""

    if item_type == "curr_act":
        response_data, status_code = await api_client.create_current_action(user_id, item_name)
        type_rus = "–∑–∞–¥–∞—á–∞"
    elif item_type == "waiting":
        response_data, status_code = await api_client.create_waiting_task(user_id, item_name)
        type_rus = "–æ–∂–∏–¥–∞–Ω–∏–µ"
    elif item_type == "notes":
        response_data, status_code = await api_client.create_note(user_id, item_name)
        type_rus = "–∑–∞–º–µ—Ç–∫–∞"
    # smt_ltr –Ω–µ —Å–æ–∑–¥–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ —Å–≤–æ–±–æ–¥–Ω—ã–π –≤–≤–æ–¥, —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–Ω–æ—Å –∏–∑ curr_act
    
    if status_code in [201, 200]: # 200 –º–æ–∂–µ—Ç –±—ã—Ç—å, –µ—Å–ª–∏ API —Ç–∞–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω
        await message.reply(f"‚úÖ {type_rus.capitalize()} '{item_name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞.")
    else:
        error_msg = response_data.get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞") if response_data else "–°–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
        await message.reply(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å {type_rus}: {error_msg} (–∫–æ–¥: {status_code})")

@router.message(F.text & ~F.text.startswith('/')) # –õ—é–±–æ–π —Ç–µ–∫—Å—Ç, –Ω–µ —è–≤–ª—è—é—â–∏–π—Å—è –∫–æ–º–∞–Ω–¥–æ–π
async def handle_free_text(message: Message, state: FSMContext, bot: Bot):
    user_id = message.from_user.id
    task_text = message.text

    await message.reply("üß† –†–∞—Å–ø–æ–∑–Ω–∞—é –≤–∞—à—É –∑–∞–¥–∞—á—É...")
    
    ai_response, ai_status = await api_client.ai_define_task(task_text)

    if ai_status == 200 and ai_response:
        task_type = ai_response.get("task_type")
        logger.info(f"AI defined task '{task_text}' as type: {task_type}")

        if task_type == "trash":
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è, —á—Ç–æ–±—ã –µ–≥–æ –ø–æ—Ç–æ–º —É–¥–∞–ª–∏—Ç—å –∏–ª–∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
            sent_message = await message.reply(
                "üóëÔ∏è –ü–æ—Ö–æ–∂–µ, —ç—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –∑–∞–¥–∞—á—É. –£–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –≤–≤–æ–¥?",
                reply_markup=get_confirm_delete_keyboard(item_id="0", item_type="trash_suggestion", original_message_id=message.message_id)
            )
            await state.update_data(original_task_text=task_text, last_bot_message_id=sent_message.message_id)
        elif task_type in ["current_actions", "waiting", "notes"]:
            if task_type == "current_actions":
                task_type = "curr_act"
            await add_item_based_on_type(user_id, task_text, task_type, message)
        else:
            await message.reply(f"üòï –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∑–∞–¥–∞—á–∏ –æ—Ç AI: {task_type}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å.")
    else:
        error_msg = ai_response.get("error", "AI —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω") if ai_response else "AI —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
        await message.reply(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ AI: {error_msg} (–∫–æ–¥: {ai_status}).\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∑–∞–¥–∞—á—É –≤—Ä—É—á–Ω—É—é —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ "–î–∞ (–º—É—Å–æ—Ä)" / "–ù–µ—Ç (–≤–≤–µ—Å—Ç–∏ —Å–Ω–æ–≤–∞)"
@router.callback_query(FreeTextAction.filter(F.action == "confirm_delete"))
async def handle_freetext_confirm_delete(query: CallbackQuery, callback_data: FreeTextAction, state: FSMContext, bot: Bot):
    await query.answer("–î–µ–π—Å—Ç–≤–∏–µ —É—á—Ç–µ–Ω–æ.")
    if callback_data.original_message_id and query.message:
        try:
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–ü–æ—Ö–æ–∂–µ, —ç—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –∑–∞–¥–∞—á—É..."
            await bot.delete_message(chat_id=query.message.chat.id, message_id=query.message.message_id)
            # –ú–æ–∂–Ω–æ —Ç–∞–∫–∂–µ —É–¥–∞–ª–∏—Ç—å –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ —ç—Ç–æ –Ω—É–∂–Ω–æ
            # await bot.delete_message(chat_id=query.message.chat.id, message_id=callback_data.original_message_id)
            await query.message.answer("üóëÔ∏è –í–≤–æ–¥ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω.")
        except Exception as e:
            logger.error(f"Error deleting message for freetext confirm_delete: {e}")
            await query.message.edit_text("üóëÔ∏è –í–≤–æ–¥ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω.") # Fallback
    await state.clear()


@router.callback_query(FreeTextAction.filter(F.action == "retry_input"))
async def handle_freetext_retry_input_prompt(query: CallbackQuery, callback_data: FreeTextAction, state: FSMContext, bot: Bot):
    await query.answer()
    if query.message :
        await query.message.edit_text("‚úçÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ –µ—â–µ —Ä–∞–∑:")
    await state.set_state(CommonStates.waiting_for_retry_task_input)
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏, —á—Ç–æ–±—ã –µ–≥–æ –ø–æ—Ç–æ–º —É–¥–∞–ª–∏—Ç—å
    await state.update_data(message_to_delete_id=query.message.message_id if query.message else None)


@router.message(CommonStates.waiting_for_retry_task_input, F.text & ~F.text.startswith('/'))
async def handle_freetext_retry_input_process(message: Message, state: FSMContext, bot: Bot):
    user_id = message.from_user.id
    task_text = message.text
    
    context_data = await state.get_data()
    message_to_delete_id = context_data.get("message_to_delete_id")

    if message_to_delete_id:
        try:
            await bot.delete_message(chat_id=message.chat.id, message_id=message_to_delete_id)
        except Exception as e:
            logger.error(f"Error deleting prompt message for retry input: {e}")
            
    await state.clear() # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ–¥ —Ä–µ–∫—É—Ä—Å–∏–≤–Ω—ã–º –≤—ã–∑–æ–≤–æ–º

    # –ü–æ–≤—Ç–æ—Ä–Ω–æ –≤—ã–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
    # –≠—Ç–æ –Ω–µ–º–Ω–æ–≥–æ —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ, –Ω–æ –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –ø–æ–π–¥–µ—Ç.
    # –í –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏—è—Ö —Å—Ç–æ–∏—Ç –≤—ã–Ω–µ—Å—Ç–∏ –ª–æ–≥–∏–∫—É –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é.
    await handle_free_text(message, state, bot) # –ü–µ—Ä–µ–¥–∞–µ–º –Ω–æ–≤—ã–π message, state –∏ bot

